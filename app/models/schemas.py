from typing import Optional, List
import json
from pydantic import BaseModel, field_serializer, Field, model_serializer

from app.models.enums import MessageRole


class Message(BaseModel):
    """the classic OAI compatible message"""
    role: MessageRole = Field(..., description="The OAI compatable role of the message (assistant, user, system, tool)")
    name: Optional[str] = Field(None, description="The name of the user making the message")
    content: str  = Field(..., description="The content (actual text or tool response) of the message")
    tool_call_id: Optional[str] = Field(None, description="The ID of the tool call that generated this message")

    @field_serializer('role')
    def serialize_role(self, role: MessageRole, _info):
        return role.value

class ToolCall(BaseModel):
    """an OAI compatible tool call"""
    id: str
    name: str
    arguments: Optional[str] = Field(None, description="The arguments to the function call, must be valid JSON")

class ToolCallResponseMessage(BaseModel):
    """handles formatting of tool call response messages"""
    role: MessageRole = MessageRole.assistant
    tool_calls: Optional[List['ToolCall']] = Field(None, description="The tool calls that were generated by this message")

    def model_dump_json(self, exclude_none: bool = False):
        """dump the model to a JSON string"""
        return json.dumps({"role": self.role.value, "content": [{"id": tool_call.id,
                                                          "type": "function",
                                                          "function": {
                                                              "name": tool_call.name,
                                                              "arguments": tool_call.arguments
                                                            }} for tool_call in self.tool_calls]})


class AvailableTool(BaseModel):
    """a tool that is available to the agent"""
    name: str
    description: str
    function: str